//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit13.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm13 *Form13;

struct Question {
    std::string text;
    std::string answer;
};

extern std::vector<Question> questions;  // Объявление, но не определение

//---------------------------------------------------------------------------
std::vector<Question> questions = {
	{"Какое значение примет переменная i после завершения цикла for (int i = 0; i < 5; i++)?", {"4", "5", "0"}, 1},
	{"Какой цикл можно использовать для итерации по элементам массива фиксированной длины?", {"while", "for", "do-while"}, 1},
	{"Что произойдет при выполнении следующего кода? int i = 0; while (i < 5) { i++; }?", {"Цикл выполнится 5 раз", "Цикл не выполнится", "Цикл выполнится бесконечно"}, 0},
	{"Что делает следующий код: for (int i = 10; i > 0; i--)?", {"Увеличивает i на 1 в каждой итерации", "Уменьшает i на 1 в каждой итерации", "Цикл не выполнится"}, 1},
	{"Какое значение будет у переменной i после выполнения цикла for (int i = 0; i < 10; i+=2)?", {"8", "10", "12"}, 1},
	{"Что произойдет при выполнении цикла while (1)?", {"Цикл завершится сразу", "Цикл выполнится один раз", "Цикл выполнится бесконечно"}, 2},
	{"Какой цикл следует использовать, если необходимо гарантировать выполнение хотя бы одной итерации?", {"for", "do-while", "while"}, 1},
	{"Что делает следующий код? for (int i = 0; i < 5; i++) { if (i == 3) break; }", {"Цикл завершится при i = 3", "Цикл выполнится 5 раз", "Цикл пропустит итерацию с i = 3"}, 0},
	{"Что произойдет при выполнении следующего кода? for (int i = 0; i < 5; i++) { continue; }", {"Цикл завершится сразу", "Цикл выполнится 5 раз, но без тела", "Цикл завершится после первой итерации"}, 1},
	{"Какой цикл чаще всего используется для работы с динамическими структурами данных, такими как список?", {"while", "for", "do-while"}, 0},

};

int currentQuestionIndex = 0;  // Индекс текущего вопроса
int score = 0;  // Счет правильных ответов

void __fastcall TForm13::ShowQuestion(int index) {
	if (index < static_cast<int>(questions.size())) {
		Label1->Caption = questions[index].question;
		RadioGroup1->Items->Clear();
		for (const auto &option : questions[index].options) {
			RadioGroup1->Items->Add(option);
		}
		RadioGroup1->ItemIndex = -1;
	} else {
		ShowMessage("Тест завершен. Ваш результат: " + IntToStr(static_cast<int>(score)) + " из " + IntToStr(static_cast<int>(questions.size())));
		Close();
	}
}

__fastcall TForm13::TForm13(TComponent* Owner)
	: TForm(Owner)
{
}

void __fastcall TForm13::Button1Click(TObject *Sender)
{
	if (RadioGroup1->ItemIndex == questions[currentQuestionIndex].correctAnswerIndex) {
		score++;
	}
	currentQuestionIndex++;
	ShowQuestion(currentQuestionIndex);
}

void __fastcall TForm13::FormShow(TObject *Sender)
{
	ShowQuestion(0);
}
//---------------------------------------------------------------------------
